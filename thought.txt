This is a twitter clone and in this project we can post our twit, like of any twits,
and delete our twits , update our profile, and we can follow the user and unfollow the user
we can also comment on the twits, and much more

Let`s breakdown in the details of this project------->


********main server*********

Middleware and Configuration:
Middleware like cors, express.json, express.urlencoded, and cookieParser are appropriately set up to handle cross-origin requests, parse JSON and form data, and handle cookies.
Cloudinary configuration is initialized using environment variables for the cloud name, API key, and API secret.

Route Handling:
Routes for authentication, user management, post management, and notifications are defined and mounted using app.use.
This modular approach keeps the code organized and makes it easier to add new routes or modify existing ones.

Static File Serving:
In production mode (NODE_ENV === "production"), the server serves static files from the frontend/dist directory using express.static.
For all other routes, it serves the index.html file from the same directory. This is typical behavior for single-page applications (SPAs) using client-side routing.

Server Startup:
The server listens on the specified port (PORT), and a callback function logs a message indicating that the server is running.
The connectMongoDB function is called to establish a connection to the MongoDB database.

Environment Variables:
Environment variables are loaded from a .env file using dotenv.config(). This allows sensitive information like API keys and secrets to be kept secure and configurable.



***********Authentication Controllers:***********

Signup:
Validates user input (email format, unique username, unique email, password length).
Hashes the password before saving it to the database.
Generates a JWT token and sets it as a cookie upon successful signup.
Returns user details (excluding password) upon successful signup.

Login:
Finds the user by username.
Compares the provided password hash with the stored password hash.
Generates a JWT token and sets it as a cookie upon successful login.
Returns user details (excluding password) upon successful login.

Logout:
Clears the JWT cookie upon logout.
Returns a success message upon successful logout.
Get Current User (getMe):
Retrieves the current user's details (excluding password) based on the JWT token.
Returns user details upon successful retrieval.

Notification Controllers:
Get Notifications:
Retrieves notifications for the current user.
Populates the sender's username and profile image in notifications.
Marks notifications as read upon retrieval.

Delete Notifications:
Deletes all notifications for the current user.
Returns a success message upon successful deletion.

Post Controllers:
Create Post:
Handles post creation with text or image.
Uploads images to Cloudinary and saves the secure URL in the database.
Returns the created post upon successful creation.

Delete Post:
Deletes a post by ID, ensuring only the author can delete it.
Deletes associated images from Cloudinary.
Returns a success message upon successful deletion.
Comment on Post:
Adds a comment to a post.
Updates the post with the new comment.
Returns the updated post upon successful comment addition.

Like/Unlike Post:
Allows users to like/unlike a post.
Creates/deletes notifications for post likes.
Returns updated like count upon successful action.

Get All Posts:
Retrieves all posts sorted by creation date.
Populates user and comments fields.

User Profile Controllers:
Get User Profile:
Retrieves user profile by username.
Excludes the password field from the response.

Follow/Unfollow User:
Allows users to follow/unfollow other users.
Creates notifications for user follows.
Returns success messages upon follow/unfollow actions.

Get Suggested Users:
Retrieves suggested users for the current user.
Excludes the password field from suggested user profiles.

Update User Profile:
Allows users to update their profile information.
Handles password update securely with bcrypt.
Uploads profile and cover images to Cloudinary.
Returns updated user profile upon successful update.




*********MODEL*********


Notification Model:
The notification schema defines the structure for notifications sent between users.
It includes references to the user who triggered the notification (from) and the user who should receive it (to).
The type field indicates the type of notification, such as "follow" or "like".
There's a boolean field read to mark whether the notification has been read.
Timestamps are included for createdAt and updatedAt.


Post Model:
The post schema defines the structure for posts created by users.
It includes a reference to the user who created the post (user), the text content of the post (text), and the URL of any associated image (img).
Arrays are used to store user IDs who liked the post (likes) and comments on the post (comments).
Comments consist of text content and a reference to the user who made the comment.
Timestamps are included for createdAt and updatedAt.


User Model:
The user schema defines the structure for user profiles.
It includes fields for a unique username, fullName, password, and email.
Arrays store user IDs for followers (followers), users being followed (following), and posts liked by the user (likedPosts).
Additional fields include URLs for profileImg and coverImg, user bio, and link associated with the user.
Timestamps are included for createdAt and updatedAt.






